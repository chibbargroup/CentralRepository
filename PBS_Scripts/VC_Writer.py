'''
VC_PBS_Writer
Written by J.Hayes, 2/27/2017

Purpose:
Writes PBS scripts that run the samtools mpileup and bcftools call programs for reference
genomes that are either broken up into FASTA files (fasta option) or broken up into separate region
files.

The list_file should contain a list of either fasta files or region files, with one region/fasta file per line.
All paths to these, and all other files and directories files should be enumerated in full, or be enumerated with
reference to the directory where the PBS files will be submitted

Usage can be found by typing:
python VC_Writer.py -h

Arguments are added using -* flags or --arg flags (see the Arg_Parser_Init module for a full list of arguments)
  
'''

from os.path import join, basename, isdir
from os import mkdir
import sys, argparse

def Arg_Parser_Init():
	parser = argparse.ArgumentParser(description='Write PBS files for mpileup and bcftools call steps',
		epilog="NOTE: --ref_file is required if you choose the region option")
	parser.add_argument("--list_type", "-t", help="declare whether you are breaking up ref genome by regions or fasta files",
		required=True, choices = ['fasta', 'region'], type=str.lower)
	parser.add_argument("--bam_list", '-b', help='path to the bam_list file', required=True)
	parser.add_argument("--pbs_dir", '-o', help='path to save generated PBS files; by default this is the current directory', default='./')
	parser.add_argument("--results_dir", '-r', help='path where results generated by samtools will be saved', required=True)
	parser.add_argument("--ref_file", '-f', help='path to the indexed reference genome (fasta file)')
	parser.add_argument("--file_ext", '-x', help='File extension of files in file_list')
	parser.add_argument("--list_file", '-l', help='path to file containing the list of regions or fasta files', required=True)
	parser.add_argument("--email", '-e', help='email to send torque status updates to', default='no@email.com')
	return parser

def Directory_Maker(directory_list):
	for folder in directory_list:
		if not isdir(folder):
			print("Making the directory %s" %folder)
			mkdir(folder)

def File_Writer(text, file_name):
	with open(file_name, 'w') as f:
		f.write(text)

def List_File_Reader(in_file):
	out_list = []
	with open(in_file, 'r') as f:
		for line in f:
			line = line.strip('\n')
			out_list.append(line)
	return out_list

def MPileup_Fasta_Template(ref_file, bam_list, out_file, email):
	pileup_part1 = "###\n#\n" + \
	"# The PBS Header Portion (Resource Request Settings)\n" + \
	"#\n" + \
	"###\n" + \
	"\n##Set the shell\n" + \
	"#! /bin/bash\n" + \
	"#PBS	-S	/bin/bash\n"
	
	pileup_part2 = "\n##Main request settings: no. of processors, walltime, ram request\n" + \
	"#PBS	-l	procs=1\n" + \
	"#PBS	-l	walltime=72:00:00\n" + \
	"#PBS	-l	mem=4gb\n\n" + \
	"##Email settings: a = when aborted, b = when started, e = when finished\n" + \
	"#PBS	-M %s \n" %email + \
	"#PBS	-m	abe \n"

	pileup_part3 = "\n###\n" + \
	"#\n" + \
	"#The Script Portion\n" + \
	"#\n" + \
	"###\n\n" + \
	"## Initialize Programs\n" + \
	"module load application/samtools/1.3.1\n" + \
	"module load application/bcftools/1.3.1\n" + \
	"cd $PBS_O_WORKDIR\n" 

	piluep_part4 = "\n## Run Program\n" + \
	"samtools mpileup -g -t DP,AD -f %s -b %s | bcftools call -m -v -o %s" %(ref_file, bam_list, out_file)
	
	file_text = pileup_part1 + pileup_part2 + pileup_part3 + piluep_part4
	return file_text

def MPileup_Region_Template(region_file, ref_file, bam_list, out_file, email):
	pileup_part1 = "###\n" + \
	"# The PBS Header Portion (Resource Request Settings)\n" + \
	"#\n" + \
	"###\n" + \
	"\n##Set the shell\n" + \
	"#! /bin/bash\n" + \
	"#PBS	-S	/bin/bash\n"
	
	pileup_part2 = "\n##Main request settings: no. of processors, walltime, ram request\n" + \
	"#PBS	-l	procs=1\n" + \
	"#PBS	-l	walltime=72:00:00\n" + \
	"#PBS	-l	pmem=4gb\n\n" + \
	"##Email settings: a = when aborted, b = when started, e = when finished\n" + \
	"#PBS	-M %s \n" %email + \
	"#PBS	-m	abe \n"

	pileup_part3 = "\n###\n" + \
	"#\n" + \
	"#The Script Portion\n" + \
	"#\n" + \
	"###\n\n" + \
	"## Initialize Programs\n" + \
	"module load application/samtools/1.3.1\n" + \
	"module load application/bcftools/1.3.1\n" + \
	"cd $PBS_O_WORKDIR\n" 

	piluep_part4 = "\n## Run Program\n" + \
	"samtools mpileup -g -t DP,AD -L %s -f %s -b %s | bcftools call -m -v -o %s" %(region_file, ref_file, bam_list, out_file)
	
	file_text = pileup_part1 + pileup_part2 + pileup_part3 + piluep_part4
	return file_text

def Fasta_PBS_Maker(ref_file_list, bam_list, results_dir, pbs_dir, file_extension = '.fa', email = 'blank@email.com'):
	#Make output directories if needed
	mpileup_dir = join(results_dir, 'mpileup_results')
	directory_list = [mpileup_dir]
	Directory_Maker(directory_list)

	fasta_list = List_File_Reader(ref_file_list)
	for ref_file in fasta_list:
		out_file_name = join(mpileup_dir, basename(ref_file).replace(file_extension, '.bcf'))
		pbs_file_name = join(pbs_dir, basename(ref_file).replace(file_extension, '.pbs'))
		pbs_text = MPileup_Fasta_Template(ref_file, bam_list, out_file_name, email)
		File_Writer(pbs_text, pbs_file_name)

def Region_PBS_Maker(region_file_list, ref_file, bam_list, results_dir, pbs_dir, file_extension = '.txt', email = 'blank@email.com'):
	#Make output directories if needed
	mpileup_dir = join(results_dir, 'mpileup_results')
	directory_list = [mpileup_dir]
	Directory_Maker(directory_list)

	region_list = List_File_Reader(region_file_list)
	for region_file in region_list:
		out_file_name = join(mpileup_dir, basename(region_file).replace(file_extension, '.bcf'))
		pbs_file_name = join(pbs_dir, basename(region_file).replace(file_extension, '.pbs'))
		pbs_text = MPileup_Region_Template(region_file, ref_file, bam_list, out_file_name, email)
		File_Writer(pbs_text, pbs_file_name)

def Action_Tree(input_args):
	if input_args.list_type == 'region':
		if not input_args.ref_file:
			print("When using the region option, you need to also use the --ref_file input")
			print("Please see the help section for more info")
			sys.exit()
		else:
			if input_args.email and input_args.file_ext:
				Region_PBS_Maker(input_args.list_file, input_args.ref_file, input_args.bam_list, input_args.results_dir, 
					input_args.pbs_dir, input_args.file_ext, input_args.email)
			elif input_args.email and not input_args.file_ext:
				Region_PBS_Maker(input_args.list_file, input_args.ref_file, input_args.bam_list, input_args.results_dir, 
					input_args.pbs_dir, email=input_args.email)
			elif not input_args.email and input_args.file_ext:
				Region_PBS_Maker(input_args.list_file, input_args.ref_file, input_args.bam_list, input_args.results_dir, 
					input_args.pbs_dir, file_extension=input_args.file_ext)
			else:
				Region_PBS_Maker(input_args.list_file, input_args.ref_file, input_args.bam_list, input_args.results_dir, 
					input_args.pbs_dir)
	elif input_args.list_type == 'fasta':
		if input_args.email and input_args.file_ext:
			Fasta_PBS_Maker(input_args.list_file, input_args.bam_list, input_args.results_dir, 
				input_args.pbs_dir, input_args.file_ext, input_args.email)
		elif input_args.email and not input_args.file_ext:
			Fasta_PBS_Maker(input_args.list_file, input_args.bam_list, input_args.results_dir, 
				input_args.pbs_dir, email=input_args.email)
		elif not input_args.email and input_args.file_ext:
			Fasta_PBS_Maker(input_args.list_file, input_args.bam_list, input_args.results_dir, 
				input_args.pbs_dir, file_extension=input_args.file_ext)
		else:
			Fasta_PBS_Maker(input_args.list_file, input_args.bam_list, input_args.results_dir, 
				input_args.pbs_dir)

args = Arg_Parser_Init().parse_args()
Action_Tree(args)